{"version":3,"sources":["types/string.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAOyB,cAAc;;;;2BAEd,iBAAiB;;;;+BACjB,qBAAqB;;;;;;;;;;IAOjC,QAAQ;YAAR,QAAQ;;AAER,WAFA,QAAQ,GAEL;0BAFH,QAAQ;;AAGjB,+BAHS,QAAQ,6CAGT;AACR,QAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;GACvB;;;;;;;;;;;;;;;;;eALU,QAAQ;;WAkBJ,kBAAC,CAAC,EAAE,CAAC,EAAE;AACpB,UAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;AACzB,cAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;OACnD;;AAED,UAAM,IAAI,GAAG,EAAG,CAAC;AACjB,UAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,EAAE;AAChC,YAAI,CAAC,SAAS,GAAG,CAAC,CAAC;OACpB,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,EAAE;AACvC,YAAI,CAAC,SAAS,GAAG,CAAC,CAAC;OACpB,MAAM,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;AAChC,YAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AACnB,YAAI,CAAC,SAAS,GAAG,CAAC,CAAC;OACpB,MAAM;AACL,YAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;OACrC;;AAED,aAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAC9C;;;;;;;;;;;;WAWe,mBAAC,OAAO,EAAE;AACxB,UAAI,EAAE,OAAO,YAAY,MAAM,CAAA,AAAC,EAAE;AAChC,cAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;OAC3D;;AAED,aAAO,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;KACjD;;;SArDU,QAAQ;;;;;qBA6DN,UAAS,SAAS,EAAE,IAAI,EAAE;;;;;AAKvC,WAAS,CAAC,MAAM,GAAG,QAAQ,CAAC;;;;;AAK5B,WAAS,CAAC,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,YAAW;AACzD,WAAO,kCAAY,IAAI,CAAC,IAAI,EAAE,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;GACnD,CAAC;;;;;AAKF,gCAAM,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;;;;;AAKxC,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC;AACzC,MAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAM,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACvD,MAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,EAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACvD,MAAI,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;AACxD,MAAI,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;CAEzD","file":"types/string.js","sourcesContent":["/**\n * Schematik.String\n *\n * @author          Denis Luchkin-Zhou <wyvernzora@gmail.com>\n * @license         MIT\n */\n\nimport Schematik    from '../schematik';\n\nimport Range        from '../addons/range';\nimport instantiate  from '../util/instantiate';\n\n/**\n * Schematik.String\n *\n * @classdesc       Schematik string type representation.\n */\nexport class SkString extends Schematik {\n\n  constructor() {\n    super();\n    this.__type('string');\n  }\n\n\n  /**\n   * .length()\n   *\n   * @access        public\n   * @desc          Sets the minimum and/or maximum allowed length.\n   *                Behavior depends on `range` flag.\n   * @param         {a} the first length value.\n   * @param         {b} the second length value.\n   * @returns       A copy of the Schematik with the length values set.\n   */\n  static __length(a, b) {\n    if (typeof a !== 'number') {\n      throw new Error('Length value must be a number.');\n    }\n\n    const diff = { };\n    if (this.flag('range') === 'min') {\n      diff.minLength = a;\n    } else if (this.flag('range') === 'max') {\n      diff.maxLength = a;\n    } else if (typeof b === 'number') {\n      diff.minLength = a;\n      diff.maxLength = b;\n    } else {\n      diff.minLength = diff.maxLength = a;\n    }\n\n    return this.schema(diff).flag('range', null);\n  }\n\n\n  /**\n   * .matches()\n   *\n   * @access        public\n   * @desc          Restricts the SkString to ones that match the regex.\n   * @param         {pattern} an intance of RegExp\n   * @returns       A copy of the Schematik with the pattern set.\n   */\n  static __matches(pattern) {\n    if (!(pattern instanceof RegExp)) {\n      throw new Error('Pattern must be an instance of RegExp.');\n    }\n\n    return this.schema({ pattern: pattern.source });\n  }\n\n}\n\n\n/*!\n * Export a middleware function.\n */\nexport default function(Schematik, Util) {\n\n  /*!\n   * Expose SkString as Schematik.String\n   */\n  Schematik.String = SkString;\n\n  /*!\n   * Attach the Schematik.string() shorthand.\n   */\n  Schematik.string = Schematik.prototype.string = function() {\n    return instantiate(this.self(), Schematik.String);\n  };\n\n  /*!\n   * Attach shared flags.\n   */\n  Range(Schematik.String.prototype, Util);\n\n  /*!\n   * Attach string-specific properties.\n   */\n  const proto = Schematik.String.prototype;\n  Util.addChainable(proto, 'len',     SkString.__length);\n  Util.addChainable(proto, 'length',  SkString.__length);\n  Util.addChainable(proto, 'matches', SkString.__matches);\n  Util.addChainable(proto, 'pattern', SkString.__matches);\n\n}\n"],"sourceRoot":"/source/"}