{"version":3,"sources":["types/number.js"],"names":[],"mappings":"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","file":"types/number.js","sourcesContent":["/**\n * Schematik.Number\n *\n * @author          Denis Luchkin-Zhou <wyvernzora@gmail.com>\n * @license         MIT\n */\n\nimport Schematik    from '../schematik';\nimport instantiate  from '../util/instantiate';\n\n/**\n * Schematik.Number\n *\n * @classdesc       Schematik numbner type representation.\n */\nexport class SkNumber extends Schematik {\n\n  constructor() {\n    super();\n    this.__type('number');\n  }\n\n  /**\n   * .exclusive\n   *\n   * @access          public\n   * @desc            Sets the `exclusive` flag.\n   * @returns         A copy of the Schematik with the `exclusive` flag set.\n   */\n  static __exclusive() {\n    return this.flag('exclusive', true);\n  }\n\n\n  /**\n   * .min()\n   *\n   * @access          public\n   * @desc            Specifies the minimum value, inclusive unless `exclusive` is\n   *                  set to true.\n   * @param           {value} minimum value, must be a number.\n   * @returns         A copy of the Schematik with the minimum value set.\n   */\n  static __min(value) {\n    if (typeof value !== 'number') {\n      throw new Error('{value} must be a number.');\n    }\n\n    const max = this.schema('maximum');\n    if (max !== undefined && value > max) {\n      throw new Error('{min} cannot be greater than {max}.');\n    }\n\n    const diff = { minimum: value };\n    if (this.flag('exclusive')) { diff.exclusiveMinimum = true; }\n    return this.schema(diff).flag('exclusive', false);\n  }\n\n\n  /**\n   * .max()\n   *\n   * @access          public\n   * @desc            Specifies the maximum value, inclusive unless `exclusive` is\n   *                  set to true.\n   * @param           {value} maximum value, must be a number.\n   * @returns         A copy of the Schematik with the maximum value set.\n   */\n  static __max(value) {\n    if (typeof value !== 'number') {\n      throw new Error('{value} must be a number.');\n    }\n\n    const min = this.schema('minimum');\n    if (min !== undefined && value < min) {\n      throw new Error('{max} cannot be less than {min}.');\n    }\n\n    const diff = { maximum: value };\n    if (this.flag('exclusive')) { diff.exclusiveMaximum = true; }\n    return this.schema(diff).flag('exclusive', false);\n  }\n\n\n  /**\n   * .range()\n   *\n   * @access          public\n   * @desc            Specifies both minimum and maximum values. Inclusive unless\n   *                  the `exclusive` flag is set to true.\n   * @param           {min} the minimum value, must be a number.\n   * @param           {max} the maximum value, must be a number.\n   * @returns         A copy of the Schematik with both minimum and maximum values\n   */\n  static __range(min, max) {\n    if (typeof min !== 'number' || typeof max !== 'number') {\n      throw new Error('Min and max values must be numbers.');\n    }\n    if (min > max) {\n      throw new Error('Min cannot be greater than max.');\n    }\n\n    const diff = { minimum: min, maximum: max };\n    if (this.flag('exclusive')) {\n      diff.exclusiveMinimum = true;\n      diff.exclusiveMaximum = true;\n    }\n    return this.schema(diff).flag('exclusive', false);\n  }\n\n\n  /**\n   * .multiple()\n   *\n   * @access          public\n   * @desc            Restricts the number to the multiples of the {value}.\n   * @param           {value} the divider value.\n   * @returns         A copy of the Schematik with multipleOf value set.\n   */\n  static __multiple(value) {\n    if (typeof value !== 'number') {\n      throw new Error('{value} must be a number.');\n    }\n\n    return this.schema({ multipleOf: value });\n  }\n\n}\n\n/*!\n * Export a middleware function.\n */\nexport default function(schematik, Util) {\n\n  /*!\n   * Expose SkNumber as Schematik.Number\n   */\n  schematik.Number = SkNumber;\n\n  /*!\n   * Attach the Schematik.number() shorthand.\n   */\n  schematik.number = schematik.prototype.number = function() {\n    return instantiate(this.self(), schematik.Number);\n  };\n\n  /*!\n   * Attach number-specific properties.\n   */\n  const proto = schematik.Number.prototype;\n  Util.addProperty(proto,  'exclusive', SkNumber.__exclusive);\n  Util.addChainable(proto, 'min',       SkNumber.__min);\n  Util.addChainable(proto, 'max',       SkNumber.__max);\n  Util.addChainable(proto, 'range',     SkNumber.__range);\n  Util.addChainable(proto, 'multiple',  SkNumber.__multiple);\n\n}\n"],"sourceRoot":"/source/"}