{"version":3,"sources":["schematik.js"],"names":[],"mappings":"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","file":"schematik.js","sourcesContent":["/**\n * Schematik\n *\n * @author          Denis Luchkin-Zhou <wyvernzora@gmail.com>\n * @license         MIT\n */\n\nimport Immutable       from 'seamless-immutable';\n\nimport * as Config     from './config';\nimport * as Symbols    from './util/symbols';\nimport isSchematik     from './util/is-schematik';\n\n/**\n * Schematik\n *\n * @classdesc Base class for all Schematiks.\n */\nexport default class Schematik {\n\n  constructor() {\n    // Immutable object for storing flags and schema state\n    this[Symbols.flags]  = Immutable(Config.defaultFlags);\n    this[Symbols.schema] = Immutable({ });\n  }\n\n  /**\n   * # .done()\n   *\n   * @access        public\n   * @desc          Converts the Schematik into an actual JSON schema object.\n   * @returns       A JSON schema object.\n   */\n  done() {\n    return this[Symbols.schema].asMutable({ deep: true });\n  }\n\n  /**\n   * # .self()\n   *\n   * @access        public\n   * @desc          Used for certain properties that can be defined on both\n   *                prototype and the class itself (static).\n   * @returns       {this}\n   */\n  self() {\n    return this;\n  }\n\n  /**\n   * # .self()\n   *\n   * @access        public\n   * @desc          Static version of .self(), serves the same purpose.\n   * @returns       new Schematik object.\n   */\n  static self() {\n    return new Schematik();\n  }\n\n  /**\n   * # .clone()\n   *\n   * @access        public\n   * @desc          Creates a copy of the Schematik object.\n   * @returns       A copy of the Schematik object.\n   */\n  clone() {\n    const copy = Object.create(this);\n    this.copyTo(copy);\n    return copy;\n  }\n\n  /**\n   * # .flag(key, value)\n   *\n   * @access        public\n   * @desc          Gets or sets the value of a flag.\n   * @param         {key} name of the flag.\n   * @param         {value} new value for the flag, if any.\n   * @returns       Flag value when {value} is {undefined};\n   *                otherwise a new copy of the Schematik object with the\n   *                specified flag set to the {value}.\n   */\n  flag(key, value) {\n\n    if (typeof value === 'undefined') {\n      return this[Symbols.flags][key];\n    }\n\n    const result = this.clone();\n    result[Symbols.flags] = this[Symbols.flags].merge({ [key]: value });\n    return result;\n  }\n\n  /**\n   * # .schema(value)\n   *\n   * @access        public\n   * @desc          Gets or sets the schema of a flag.\n   * @param         {value} schema property path; or a partial schema to merge.\n   * @param         {deep} specifies whether to perform a deep merge.\n   * @returns       Value of the property path if {value} is a {string};\n   *                otherwise a new copy of the Schematik object with the\n   *                {value} merged into the schema.\n   */\n  schema(value, deep = false) {\n    if (typeof value === 'string') {\n      return this[Symbols.schema][value];\n    }\n\n    if (typeof value === 'object') {\n      const result = this.clone();\n      result[Symbols.schema] = this[Symbols.schema].merge(value, {deep: deep});\n      return result;\n    }\n\n    throw new Error('Value must be a string or an object.');\n  }\n\n  /**\n   * # .clone()\n   *\n   * @access        public\n   * @desc          Copies flags and schema to another Schematik object.\n   * @param         {this} another Schematik object.\n   * @returns       {this} for chaining.\n   */\n  copyTo(that) {\n    if (!isSchematik(that)) {\n      throw new Error('Cannot copy to a non-Schematik object.');\n    }\n    that[Symbols.flags]  = this[Symbols.flags];\n    that[Symbols.schema] = this[Symbols.schema];\n    return this;\n  }\n\n  /**\n   * # .toString()\n   *\n   * @override\n   * @access        public\n   * @desc          Provides a custom string representation of the Schematik.\n   * @returns       '[object Schematik]'\n   */\n  toString() {\n    return '[object Schematik]';\n  }\n\n  /**\n   * # .__type(value)\n   *\n   * @access        protected\n   * @desc          Sets the type of the Schematik object.\n   * @param         {value} name of the type, must be a string.\n   * @returns       {this} for chaining.\n   */\n  __type(value, force) {\n\n    if (typeof value === 'undefined') {\n      return this[Symbols.schema].type;\n    }\n\n    if (!Config.whitelistedTypes.has(value)) {\n      throw new Error(`Invalid type value ${value}`);\n    }\n\n    if (!force && !Config.allowTypeOverwrite && this[Symbols.schema].type) {\n      throw new Error('Overwriting existing type is not allowed.');\n    }\n\n    this[Symbols.schema] = this[Symbols.schema].merge({ type: value });\n    return this;\n  }\n\n}\n"],"sourceRoot":"/source/"}