{"version":3,"sources":["addons/core.js"],"names":[],"mappings":"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","file":"addons/core.js","sourcesContent":["/**\n * Schematik core flags to be attached to the Schematik prototype.\n *\n * @author          Denis Luchkin-Zhou <wyvernzora@gmail.com>\n * @license         MIT\n */\n\nimport Schematik        from '../schematik';\nimport { conjunctions } from '../config';\n\n/**\n* .required\n*\n* @desc             Returns a copy of the Schematik with `required` flag set\n*                   to true.\n*/\nexport function required() {\n  return this.self().flag('required', true);\n}\n\n/**\n * .optional\n *\n * @desc            Returns a copy of the Schematik with `required` flag set\n *                  to false.\n */\nexport function optional() {\n  return this.self().flag('required', false);\n}\n\n/**\n * .negate\n *\n * @desc            Sets the `negate` flag to true.\n */\nexport function negate() {\n  return this.flag('negate', true);\n}\n\n\n/**\n * .of()\n *\n * @desc            Calls the last uninvoked function, passing it all arguments.\n */\nexport function of(...args) {\n  const chain = this.flag('chain');\n  if (chain) { return chain.apply(this, args); }\n  return this;\n}\n\n\n/**\n * .whitelist()\n *\n * @desc            Specifies a set of acceptable values.\n */\nexport function whitelist(...args) {\n  if (args.length === 0) {\n    throw new Error('Must have at least one argument.');\n  }\n\n  const diff = { enum: args };\n\n  return this.self().schema(diff);\n}\n\n\n/**\n * .one()\n *\n * @desc            Specifies a match against exactly one of schemas.\n */\nexport function one(...args) {\n  if (args.length === 0) {\n    throw new Error('Must have at least one argument.');\n  }\n\n  const result = new Schematik();\n  const diff   = {\n    oneOf: args.map((i) => (i instanceof Schematik) ? i.done() : i)\n  };\n\n  return result.schema(diff);\n}\n\n\n/**\n * .all()\n *\n * @desc            Specifies a match against all of the schemas.\n */\nexport function all(...args) {\n  if (args.length === 0) {\n    throw new Error('Must have at least one argument.');\n  }\n\n  const result = new Schematik();\n  const diff   = {\n    allOf: args.map((i) => (i instanceof Schematik) ? i.done() : i)\n  };\n\n  return result.schema(diff);\n}\n\n\n/**\n * .any()\n *\n * @desc            Specifies a match against at least one of schemas.\n */\nexport function any(...args) {\n  if (args.length === 0) {\n    throw new Error('Must have at least one argument.');\n  }\n\n  const result = new Schematik();\n  const diff   = {\n    anyOf: args.map((i) => (i instanceof Schematik) ? i.done() : i)\n  };\n\n  return result.schema(diff);\n}\n\n\n/**\n * .not()\n *\n * @desc            Negates the match against a schema.\n */\nexport function not(schema) {\n  if (typeof schema !== 'object') {\n    throw new Error('Schema must be an object.');\n  }\n\n  const result = new Schematik();\n  const diff   = { not: schema instanceof Schematik ? schema.done() : schema };\n\n  return result.schema(diff);\n}\n\n\n/**\n * Export a middleware function.\n */\nexport default function core(schematik, Util) {\n\n  Util.addProperty(schematik,            'required', required);\n  Util.addProperty(schematik.prototype,  'required', required);\n\n  Util.addProperty(schematik,            'optional', optional);\n  Util.addProperty(schematik.prototype,  'optional', optional);\n\n  Util.addProperty(schematik.prototype,  'not',      negate);\n  Util.addProperty(schematik.prototype,  'no',       negate);\n\n  Util.addChainable(schematik.prototype, 'of',       of);\n  Util.addChainable(schematik.prototype, 'enum',     whitelist);\n\n  schematik.enum = whitelist;\n  schematik.one = schematik.oneOf = one;\n  schematik.all = schematik.allOf = all;\n  schematik.any = schematik.anyOf = any;\n  schematik.not = not;\n\n  conjunctions.forEach((item) => {\n    Util.addProperty(schematik.prototype, item);\n  });\n}\n"],"sourceRoot":"/source/"}