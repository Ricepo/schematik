{"version":3,"sources":["util/instantiate.js"],"names":[],"mappings":";;;;;;;;;;;;qBAoBwB,WAAW;;;;;uBAbV,WAAW;;IAAxB,OAAO;;;;;;;;;;;;;;AAaJ,SAAS,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE;AAC9C,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;AAC1B,QAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;AACzE,QAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,CACnD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CACrC,CAAC;AACF,SAAO,MAAM,CAAC;CACf","file":"util/instantiate.js","sourcesContent":["/**\n * Schematik.util.instantiate\n *\n * @author          Denis Luchkin-Zhou <wyvernzora@gmail.com>\n * @license         MIT\n */\n\nimport * as Symbols from './symbols';\n\n/**\n * .instantiate()\n *\n * @access          public\n * @desc            Instantiates the Schematik using the specified constructor\n *                  while merging flags and schema. Type property of the schema\n *                  is ignored in this process.\n * @param           {self} current Schematik instance.\n * @param           {ctor} constructor function to use.\n * @returns         A new Schematik instance made using the {ctor}.\n */\nexport default function instantiate(self, ctor) {\n  const result = new ctor();\n  result[Symbols.flags] = result[Symbols.flags].merge(self[Symbols.flags]);\n  result[Symbols.schema] = result[Symbols.schema].merge(\n    self[Symbols.schema].without('type')\n  );\n  return result;\n}\n"],"sourceRoot":"/source/"}